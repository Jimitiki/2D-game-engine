Components - glorified data stores
	Enum to identify components:
		0x00: graphics
		0x01: movement
		0x02: physics
		0x04: puppeteer
		0x08: health
		0x10: state component?
		etc.
		If the bit of the Entity ID is set, then it has the component 
	Input component - tracks inputs (keys/buttons/mouse), mapped to "controls"
	Control component - maps "controls" (jump/turn/shoot/whatever) to functions
	
	Systems grap components and use their data to make changes to entity/other components
	It can change the other components by accessing them with entity::get_component(componentID)
	Essentially, an entity gets either 0 or 1 of any component type. So, the control system can say, 
	"hey, I need to update the movement component to change the velocity", and it gets to do that.
	
	THen maybe withing each component type there's an ID pattern so the component system can determine
	what behavior it gets? Or the components are really classes and can determine their own behavior
	e.g. SuperHardBossAIComponent vs. PatheticMookComponent. This approach does leverage polymorphism, after all.
	And then instead of generic "update()" or "draw()" methods, I could have "get_action()" functions for AI, or
	"calculate_position" for movement
	
	IMPORTANT: There is not a 1:1 component-type-to-system mapping. So their is no "position" system, the movement
	system handles updating that together with the movement component. THen, the physics system can update the movement
	component, and so forth.